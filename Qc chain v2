import hashlib
import random
from datetime import datetime
from qiskit import QuantumCircuit, Aer, execute

class QCChain:
    def __init__(self):
        self.qubit_id_counter = -1
        self.user_qubits = {}
        self.wallet_addresses = set()
        self.backend = Aer.get_backend('qasm_simulator')
        self.sold_qubits = set()

    def mine_qubit(self, qubit_state, wallet_address):
        qubit_id = self.qubit_id_counter + 1
        circuit = QuantumCircuit(1)
        circuit.h(0)
        circuit.measure_all()

        job = execute(circuit, self.backend, shots=1)
        result = job.result()
        counts = result.get_counts(circuit)
        qubit_state = list(counts.keys())[0]

        hashed_qubit_state = hashlib.sha256(qubit_state.encode('utf-8')).hexdigest()

        if wallet_address not in self.user_qubits:
            self.user_qubits[wallet_address] = []

        mined_qubit = {
            'qubit_id': qubit_id,
            'hashed_qubit_state': hashed_qubit_state,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        self.user_qubits[wallet_address].append(mined_qubit)

        self.qubit_id_counter += 1

        return qubit_id, hashed_qubit_state

class Block:
    def __init__(self, timestamp, data, previous_hash):
        self.timestamp = timestamp
        self.data = data
        self.previous_hash = previous_hash
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        sha256 = hashlib.sha256()
        sha256.update((str(self.timestamp) + str(self.data) + str(self.previous_hash)).encode('utf-8'))
        return sha256.hexdigest()

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]

    def create_genesis_block(self):
        return Block(datetime.now(), "Genesis Block", "0")

    def add_block(self, new_block):
        new_block.previous_hash = self.get_latest_block().hash
        new_block.hash = new_block.calculate_hash()
        self.chain.append(new_block)

    def get_latest_block(self):
        return self.chain[-1]

    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i-1]

            if current_block.hash != current_block.calculate_hash():
                print(f"Block {i} hash mismatch!")
                return False

            if current_block.previous_hash != previous_block.hash:
                print(f"Block {i} previous hash mismatch!")
                return False

        print("Blockchain is valid.")
        return True

    def detect_tampering(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i-1]
            if current_block.previous_hash != previous_block.hash:
                print(f"Block {i} has been tampered with!")

if __name__ == "__main__":
    qc_chain = QCChain()
    blockchain = Blockchain()

    nam_kcits_wallet = "qc-stickmans-wallet"
    qubit_id, hashed_qubit_state = qc_chain.mine_qubit("0", nam_kcits_wallet)

    repeater_memory = []
    repeater_memory.append({'qubit_id': qubit_id, 'hashed_qubit_state': hashed_qubit_state})

    num_blocks = 5
    for _ in range(num_blocks):
        new_content = f"Qubit ID: {qubit_id}, Hashed Qubit State: {hashed_qubit_state}"
        new_block = Block(datetime.now(), new_content, blockchain.get_latest_block().hash)
        blockchain.add_block(new_block)

    print("Is Blockchain Valid?", blockchain.is_chain_valid())

    blockchain.detect_tampering()

    print("Stored Qubits in Repeater Memory:")
    for qubit_data in repeater_memory:
        print(f"Qubit ID: {qubit_data['qubit_id']}, Hashed Qubit State: {qubit_data['hashed_qubit_state']}")

    for wallet, qubits in qc_chain.user_qubits.items():
        print(f"Wallet: {wallet}")
        for qubit in qubits:
            print(f"Qubit ID: {qubit['qubit_id']}, Hashed Qubit State: {qubit['hashed_qubit_state']}, Timestamp: {qubit['timestamp']}")
